// Code generated by MockGen. DO NOT EDIT.
// Source: api/proto/service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	grpc "github.com/Galish/goph-keeper/api/proto"
	gomock "github.com/golang/mock/gomock"
	grpc0 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockKeeperClient is a mock of KeeperClient interface.
type MockKeeperClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperClientMockRecorder
}

// MockKeeperClientMockRecorder is the mock recorder for MockKeeperClient.
type MockKeeperClientMockRecorder struct {
	mock *MockKeeperClient
}

// NewMockKeeperClient creates a new mock instance.
func NewMockKeeperClient(ctrl *gomock.Controller) *MockKeeperClient {
	mock := &MockKeeperClient{ctrl: ctrl}
	mock.recorder = &MockKeeperClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeperClient) EXPECT() *MockKeeperClientMockRecorder {
	return m.recorder
}

// AddCard mocks base method.
func (m *MockKeeperClient) AddCard(ctx context.Context, in *grpc.AddCardRequest, opts ...grpc0.CallOption) (*grpc.AddCardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCard", varargs...)
	ret0, _ := ret[0].(*grpc.AddCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCard indicates an expected call of AddCard.
func (mr *MockKeeperClientMockRecorder) AddCard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCard", reflect.TypeOf((*MockKeeperClient)(nil).AddCard), varargs...)
}

// AddCredentials mocks base method.
func (m *MockKeeperClient) AddCredentials(ctx context.Context, in *grpc.AddCredentialsRequest, opts ...grpc0.CallOption) (*grpc.AddCredentialsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCredentials", varargs...)
	ret0, _ := ret[0].(*grpc.AddCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCredentials indicates an expected call of AddCredentials.
func (mr *MockKeeperClientMockRecorder) AddCredentials(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredentials", reflect.TypeOf((*MockKeeperClient)(nil).AddCredentials), varargs...)
}

// AddRawNote mocks base method.
func (m *MockKeeperClient) AddRawNote(ctx context.Context, in *grpc.AddRawNoteRequest, opts ...grpc0.CallOption) (*grpc.AddRawNoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRawNote", varargs...)
	ret0, _ := ret[0].(*grpc.AddRawNoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRawNote indicates an expected call of AddRawNote.
func (mr *MockKeeperClientMockRecorder) AddRawNote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRawNote", reflect.TypeOf((*MockKeeperClient)(nil).AddRawNote), varargs...)
}

// AddTextNote mocks base method.
func (m *MockKeeperClient) AddTextNote(ctx context.Context, in *grpc.AddTextNoteRequest, opts ...grpc0.CallOption) (*grpc.AddTextNoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTextNote", varargs...)
	ret0, _ := ret[0].(*grpc.AddTextNoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTextNote indicates an expected call of AddTextNote.
func (mr *MockKeeperClientMockRecorder) AddTextNote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTextNote", reflect.TypeOf((*MockKeeperClient)(nil).AddTextNote), varargs...)
}

// DeleteCard mocks base method.
func (m *MockKeeperClient) DeleteCard(ctx context.Context, in *grpc.DeleteRequest, opts ...grpc0.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCard", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockKeeperClientMockRecorder) DeleteCard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockKeeperClient)(nil).DeleteCard), varargs...)
}

// DeleteCredentials mocks base method.
func (m *MockKeeperClient) DeleteCredentials(ctx context.Context, in *grpc.DeleteRequest, opts ...grpc0.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCredentials", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCredentials indicates an expected call of DeleteCredentials.
func (mr *MockKeeperClientMockRecorder) DeleteCredentials(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentials", reflect.TypeOf((*MockKeeperClient)(nil).DeleteCredentials), varargs...)
}

// DeleteRawNote mocks base method.
func (m *MockKeeperClient) DeleteRawNote(ctx context.Context, in *grpc.DeleteRequest, opts ...grpc0.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRawNote", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRawNote indicates an expected call of DeleteRawNote.
func (mr *MockKeeperClientMockRecorder) DeleteRawNote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRawNote", reflect.TypeOf((*MockKeeperClient)(nil).DeleteRawNote), varargs...)
}

// DeleteTextNote mocks base method.
func (m *MockKeeperClient) DeleteTextNote(ctx context.Context, in *grpc.DeleteRequest, opts ...grpc0.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTextNote", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTextNote indicates an expected call of DeleteTextNote.
func (mr *MockKeeperClientMockRecorder) DeleteTextNote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTextNote", reflect.TypeOf((*MockKeeperClient)(nil).DeleteTextNote), varargs...)
}

// GetCard mocks base method.
func (m *MockKeeperClient) GetCard(ctx context.Context, in *grpc.GetRequest, opts ...grpc0.CallOption) (*grpc.GetCardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCard", varargs...)
	ret0, _ := ret[0].(*grpc.GetCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard.
func (mr *MockKeeperClientMockRecorder) GetCard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockKeeperClient)(nil).GetCard), varargs...)
}

// GetCardsList mocks base method.
func (m *MockKeeperClient) GetCardsList(ctx context.Context, in *emptypb.Empty, opts ...grpc0.CallOption) (*grpc.GetListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCardsList", varargs...)
	ret0, _ := ret[0].(*grpc.GetListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardsList indicates an expected call of GetCardsList.
func (mr *MockKeeperClientMockRecorder) GetCardsList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardsList", reflect.TypeOf((*MockKeeperClient)(nil).GetCardsList), varargs...)
}

// GetCredentials mocks base method.
func (m *MockKeeperClient) GetCredentials(ctx context.Context, in *grpc.GetRequest, opts ...grpc0.CallOption) (*grpc.GetCredentialsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCredentials", varargs...)
	ret0, _ := ret[0].(*grpc.GetCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockKeeperClientMockRecorder) GetCredentials(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockKeeperClient)(nil).GetCredentials), varargs...)
}

// GetCredentialsList mocks base method.
func (m *MockKeeperClient) GetCredentialsList(ctx context.Context, in *emptypb.Empty, opts ...grpc0.CallOption) (*grpc.GetListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCredentialsList", varargs...)
	ret0, _ := ret[0].(*grpc.GetListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsList indicates an expected call of GetCredentialsList.
func (mr *MockKeeperClientMockRecorder) GetCredentialsList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsList", reflect.TypeOf((*MockKeeperClient)(nil).GetCredentialsList), varargs...)
}

// GetRawNote mocks base method.
func (m *MockKeeperClient) GetRawNote(ctx context.Context, in *grpc.GetRequest, opts ...grpc0.CallOption) (*grpc.GetRawNoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRawNote", varargs...)
	ret0, _ := ret[0].(*grpc.GetRawNoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawNote indicates an expected call of GetRawNote.
func (mr *MockKeeperClientMockRecorder) GetRawNote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawNote", reflect.TypeOf((*MockKeeperClient)(nil).GetRawNote), varargs...)
}

// GetRawNotesList mocks base method.
func (m *MockKeeperClient) GetRawNotesList(ctx context.Context, in *emptypb.Empty, opts ...grpc0.CallOption) (*grpc.GetListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRawNotesList", varargs...)
	ret0, _ := ret[0].(*grpc.GetListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawNotesList indicates an expected call of GetRawNotesList.
func (mr *MockKeeperClientMockRecorder) GetRawNotesList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawNotesList", reflect.TypeOf((*MockKeeperClient)(nil).GetRawNotesList), varargs...)
}

// GetTextNote mocks base method.
func (m *MockKeeperClient) GetTextNote(ctx context.Context, in *grpc.GetRequest, opts ...grpc0.CallOption) (*grpc.GetTextNoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTextNote", varargs...)
	ret0, _ := ret[0].(*grpc.GetTextNoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextNote indicates an expected call of GetTextNote.
func (mr *MockKeeperClientMockRecorder) GetTextNote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextNote", reflect.TypeOf((*MockKeeperClient)(nil).GetTextNote), varargs...)
}

// GetTextNotesList mocks base method.
func (m *MockKeeperClient) GetTextNotesList(ctx context.Context, in *emptypb.Empty, opts ...grpc0.CallOption) (*grpc.GetListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTextNotesList", varargs...)
	ret0, _ := ret[0].(*grpc.GetListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextNotesList indicates an expected call of GetTextNotesList.
func (mr *MockKeeperClientMockRecorder) GetTextNotesList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextNotesList", reflect.TypeOf((*MockKeeperClient)(nil).GetTextNotesList), varargs...)
}

// SignIn mocks base method.
func (m *MockKeeperClient) SignIn(ctx context.Context, in *grpc.AuthRequest, opts ...grpc0.CallOption) (*grpc.AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignIn", varargs...)
	ret0, _ := ret[0].(*grpc.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockKeeperClientMockRecorder) SignIn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockKeeperClient)(nil).SignIn), varargs...)
}

// SignUp mocks base method.
func (m *MockKeeperClient) SignUp(ctx context.Context, in *grpc.AuthRequest, opts ...grpc0.CallOption) (*grpc.AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUp", varargs...)
	ret0, _ := ret[0].(*grpc.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockKeeperClientMockRecorder) SignUp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockKeeperClient)(nil).SignUp), varargs...)
}

// UpdateCard mocks base method.
func (m *MockKeeperClient) UpdateCard(ctx context.Context, in *grpc.UpdateCardRequest, opts ...grpc0.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCard", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockKeeperClientMockRecorder) UpdateCard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockKeeperClient)(nil).UpdateCard), varargs...)
}

// UpdateCredentials mocks base method.
func (m *MockKeeperClient) UpdateCredentials(ctx context.Context, in *grpc.UpdateCredentialsRequest, opts ...grpc0.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCredentials", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCredentials indicates an expected call of UpdateCredentials.
func (mr *MockKeeperClientMockRecorder) UpdateCredentials(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentials", reflect.TypeOf((*MockKeeperClient)(nil).UpdateCredentials), varargs...)
}

// UpdateRawNote mocks base method.
func (m *MockKeeperClient) UpdateRawNote(ctx context.Context, in *grpc.UpdateRawNoteRequest, opts ...grpc0.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRawNote", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRawNote indicates an expected call of UpdateRawNote.
func (mr *MockKeeperClientMockRecorder) UpdateRawNote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRawNote", reflect.TypeOf((*MockKeeperClient)(nil).UpdateRawNote), varargs...)
}

// UpdateTextNote mocks base method.
func (m *MockKeeperClient) UpdateTextNote(ctx context.Context, in *grpc.UpdateTextNoteRequest, opts ...grpc0.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTextNote", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTextNote indicates an expected call of UpdateTextNote.
func (mr *MockKeeperClientMockRecorder) UpdateTextNote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTextNote", reflect.TypeOf((*MockKeeperClient)(nil).UpdateTextNote), varargs...)
}

// MockKeeperServer is a mock of KeeperServer interface.
type MockKeeperServer struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperServerMockRecorder
}

// MockKeeperServerMockRecorder is the mock recorder for MockKeeperServer.
type MockKeeperServerMockRecorder struct {
	mock *MockKeeperServer
}

// NewMockKeeperServer creates a new mock instance.
func NewMockKeeperServer(ctrl *gomock.Controller) *MockKeeperServer {
	mock := &MockKeeperServer{ctrl: ctrl}
	mock.recorder = &MockKeeperServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeperServer) EXPECT() *MockKeeperServerMockRecorder {
	return m.recorder
}

// AddCard mocks base method.
func (m *MockKeeperServer) AddCard(arg0 context.Context, arg1 *grpc.AddCardRequest) (*grpc.AddCardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCard", arg0, arg1)
	ret0, _ := ret[0].(*grpc.AddCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCard indicates an expected call of AddCard.
func (mr *MockKeeperServerMockRecorder) AddCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCard", reflect.TypeOf((*MockKeeperServer)(nil).AddCard), arg0, arg1)
}

// AddCredentials mocks base method.
func (m *MockKeeperServer) AddCredentials(arg0 context.Context, arg1 *grpc.AddCredentialsRequest) (*grpc.AddCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCredentials", arg0, arg1)
	ret0, _ := ret[0].(*grpc.AddCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCredentials indicates an expected call of AddCredentials.
func (mr *MockKeeperServerMockRecorder) AddCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredentials", reflect.TypeOf((*MockKeeperServer)(nil).AddCredentials), arg0, arg1)
}

// AddRawNote mocks base method.
func (m *MockKeeperServer) AddRawNote(arg0 context.Context, arg1 *grpc.AddRawNoteRequest) (*grpc.AddRawNoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRawNote", arg0, arg1)
	ret0, _ := ret[0].(*grpc.AddRawNoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRawNote indicates an expected call of AddRawNote.
func (mr *MockKeeperServerMockRecorder) AddRawNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRawNote", reflect.TypeOf((*MockKeeperServer)(nil).AddRawNote), arg0, arg1)
}

// AddTextNote mocks base method.
func (m *MockKeeperServer) AddTextNote(arg0 context.Context, arg1 *grpc.AddTextNoteRequest) (*grpc.AddTextNoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTextNote", arg0, arg1)
	ret0, _ := ret[0].(*grpc.AddTextNoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTextNote indicates an expected call of AddTextNote.
func (mr *MockKeeperServerMockRecorder) AddTextNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTextNote", reflect.TypeOf((*MockKeeperServer)(nil).AddTextNote), arg0, arg1)
}

// DeleteCard mocks base method.
func (m *MockKeeperServer) DeleteCard(arg0 context.Context, arg1 *grpc.DeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockKeeperServerMockRecorder) DeleteCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockKeeperServer)(nil).DeleteCard), arg0, arg1)
}

// DeleteCredentials mocks base method.
func (m *MockKeeperServer) DeleteCredentials(arg0 context.Context, arg1 *grpc.DeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentials", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCredentials indicates an expected call of DeleteCredentials.
func (mr *MockKeeperServerMockRecorder) DeleteCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentials", reflect.TypeOf((*MockKeeperServer)(nil).DeleteCredentials), arg0, arg1)
}

// DeleteRawNote mocks base method.
func (m *MockKeeperServer) DeleteRawNote(arg0 context.Context, arg1 *grpc.DeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRawNote", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRawNote indicates an expected call of DeleteRawNote.
func (mr *MockKeeperServerMockRecorder) DeleteRawNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRawNote", reflect.TypeOf((*MockKeeperServer)(nil).DeleteRawNote), arg0, arg1)
}

// DeleteTextNote mocks base method.
func (m *MockKeeperServer) DeleteTextNote(arg0 context.Context, arg1 *grpc.DeleteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTextNote", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTextNote indicates an expected call of DeleteTextNote.
func (mr *MockKeeperServerMockRecorder) DeleteTextNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTextNote", reflect.TypeOf((*MockKeeperServer)(nil).DeleteTextNote), arg0, arg1)
}

// GetCard mocks base method.
func (m *MockKeeperServer) GetCard(arg0 context.Context, arg1 *grpc.GetRequest) (*grpc.GetCardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard", arg0, arg1)
	ret0, _ := ret[0].(*grpc.GetCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard.
func (mr *MockKeeperServerMockRecorder) GetCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockKeeperServer)(nil).GetCard), arg0, arg1)
}

// GetCardsList mocks base method.
func (m *MockKeeperServer) GetCardsList(arg0 context.Context, arg1 *emptypb.Empty) (*grpc.GetListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardsList", arg0, arg1)
	ret0, _ := ret[0].(*grpc.GetListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardsList indicates an expected call of GetCardsList.
func (mr *MockKeeperServerMockRecorder) GetCardsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardsList", reflect.TypeOf((*MockKeeperServer)(nil).GetCardsList), arg0, arg1)
}

// GetCredentials mocks base method.
func (m *MockKeeperServer) GetCredentials(arg0 context.Context, arg1 *grpc.GetRequest) (*grpc.GetCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", arg0, arg1)
	ret0, _ := ret[0].(*grpc.GetCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockKeeperServerMockRecorder) GetCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockKeeperServer)(nil).GetCredentials), arg0, arg1)
}

// GetCredentialsList mocks base method.
func (m *MockKeeperServer) GetCredentialsList(arg0 context.Context, arg1 *emptypb.Empty) (*grpc.GetListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsList", arg0, arg1)
	ret0, _ := ret[0].(*grpc.GetListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsList indicates an expected call of GetCredentialsList.
func (mr *MockKeeperServerMockRecorder) GetCredentialsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsList", reflect.TypeOf((*MockKeeperServer)(nil).GetCredentialsList), arg0, arg1)
}

// GetRawNote mocks base method.
func (m *MockKeeperServer) GetRawNote(arg0 context.Context, arg1 *grpc.GetRequest) (*grpc.GetRawNoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawNote", arg0, arg1)
	ret0, _ := ret[0].(*grpc.GetRawNoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawNote indicates an expected call of GetRawNote.
func (mr *MockKeeperServerMockRecorder) GetRawNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawNote", reflect.TypeOf((*MockKeeperServer)(nil).GetRawNote), arg0, arg1)
}

// GetRawNotesList mocks base method.
func (m *MockKeeperServer) GetRawNotesList(arg0 context.Context, arg1 *emptypb.Empty) (*grpc.GetListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawNotesList", arg0, arg1)
	ret0, _ := ret[0].(*grpc.GetListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawNotesList indicates an expected call of GetRawNotesList.
func (mr *MockKeeperServerMockRecorder) GetRawNotesList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawNotesList", reflect.TypeOf((*MockKeeperServer)(nil).GetRawNotesList), arg0, arg1)
}

// GetTextNote mocks base method.
func (m *MockKeeperServer) GetTextNote(arg0 context.Context, arg1 *grpc.GetRequest) (*grpc.GetTextNoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextNote", arg0, arg1)
	ret0, _ := ret[0].(*grpc.GetTextNoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextNote indicates an expected call of GetTextNote.
func (mr *MockKeeperServerMockRecorder) GetTextNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextNote", reflect.TypeOf((*MockKeeperServer)(nil).GetTextNote), arg0, arg1)
}

// GetTextNotesList mocks base method.
func (m *MockKeeperServer) GetTextNotesList(arg0 context.Context, arg1 *emptypb.Empty) (*grpc.GetListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextNotesList", arg0, arg1)
	ret0, _ := ret[0].(*grpc.GetListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextNotesList indicates an expected call of GetTextNotesList.
func (mr *MockKeeperServerMockRecorder) GetTextNotesList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextNotesList", reflect.TypeOf((*MockKeeperServer)(nil).GetTextNotesList), arg0, arg1)
}

// SignIn mocks base method.
func (m *MockKeeperServer) SignIn(arg0 context.Context, arg1 *grpc.AuthRequest) (*grpc.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(*grpc.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockKeeperServerMockRecorder) SignIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockKeeperServer)(nil).SignIn), arg0, arg1)
}

// SignUp mocks base method.
func (m *MockKeeperServer) SignUp(arg0 context.Context, arg1 *grpc.AuthRequest) (*grpc.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1)
	ret0, _ := ret[0].(*grpc.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockKeeperServerMockRecorder) SignUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockKeeperServer)(nil).SignUp), arg0, arg1)
}

// UpdateCard mocks base method.
func (m *MockKeeperServer) UpdateCard(arg0 context.Context, arg1 *grpc.UpdateCardRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockKeeperServerMockRecorder) UpdateCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockKeeperServer)(nil).UpdateCard), arg0, arg1)
}

// UpdateCredentials mocks base method.
func (m *MockKeeperServer) UpdateCredentials(arg0 context.Context, arg1 *grpc.UpdateCredentialsRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentials", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCredentials indicates an expected call of UpdateCredentials.
func (mr *MockKeeperServerMockRecorder) UpdateCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentials", reflect.TypeOf((*MockKeeperServer)(nil).UpdateCredentials), arg0, arg1)
}

// UpdateRawNote mocks base method.
func (m *MockKeeperServer) UpdateRawNote(arg0 context.Context, arg1 *grpc.UpdateRawNoteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRawNote", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRawNote indicates an expected call of UpdateRawNote.
func (mr *MockKeeperServerMockRecorder) UpdateRawNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRawNote", reflect.TypeOf((*MockKeeperServer)(nil).UpdateRawNote), arg0, arg1)
}

// UpdateTextNote mocks base method.
func (m *MockKeeperServer) UpdateTextNote(arg0 context.Context, arg1 *grpc.UpdateTextNoteRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTextNote", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTextNote indicates an expected call of UpdateTextNote.
func (mr *MockKeeperServerMockRecorder) UpdateTextNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTextNote", reflect.TypeOf((*MockKeeperServer)(nil).UpdateTextNote), arg0, arg1)
}

// mustEmbedUnimplementedKeeperServer mocks base method.
func (m *MockKeeperServer) mustEmbedUnimplementedKeeperServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKeeperServer")
}

// mustEmbedUnimplementedKeeperServer indicates an expected call of mustEmbedUnimplementedKeeperServer.
func (mr *MockKeeperServerMockRecorder) mustEmbedUnimplementedKeeperServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKeeperServer", reflect.TypeOf((*MockKeeperServer)(nil).mustEmbedUnimplementedKeeperServer))
}

// MockUnsafeKeeperServer is a mock of UnsafeKeeperServer interface.
type MockUnsafeKeeperServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeKeeperServerMockRecorder
}

// MockUnsafeKeeperServerMockRecorder is the mock recorder for MockUnsafeKeeperServer.
type MockUnsafeKeeperServerMockRecorder struct {
	mock *MockUnsafeKeeperServer
}

// NewMockUnsafeKeeperServer creates a new mock instance.
func NewMockUnsafeKeeperServer(ctrl *gomock.Controller) *MockUnsafeKeeperServer {
	mock := &MockUnsafeKeeperServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeKeeperServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeKeeperServer) EXPECT() *MockUnsafeKeeperServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedKeeperServer mocks base method.
func (m *MockUnsafeKeeperServer) mustEmbedUnimplementedKeeperServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKeeperServer")
}

// mustEmbedUnimplementedKeeperServer indicates an expected call of mustEmbedUnimplementedKeeperServer.
func (mr *MockUnsafeKeeperServerMockRecorder) mustEmbedUnimplementedKeeperServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKeeperServer", reflect.TypeOf((*MockUnsafeKeeperServer)(nil).mustEmbedUnimplementedKeeperServer))
}
