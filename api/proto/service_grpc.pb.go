// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/proto/service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Keeper_HealthCheck_FullMethodName        = "/service.Keeper/HealthCheck"
	Keeper_SignUp_FullMethodName             = "/service.Keeper/SignUp"
	Keeper_SignIn_FullMethodName             = "/service.Keeper/SignIn"
	Keeper_AddTextNote_FullMethodName        = "/service.Keeper/AddTextNote"
	Keeper_GetTextNote_FullMethodName        = "/service.Keeper/GetTextNote"
	Keeper_GetTextNotesList_FullMethodName   = "/service.Keeper/GetTextNotesList"
	Keeper_UpdateTextNote_FullMethodName     = "/service.Keeper/UpdateTextNote"
	Keeper_DeleteTextNote_FullMethodName     = "/service.Keeper/DeleteTextNote"
	Keeper_AddRawNote_FullMethodName         = "/service.Keeper/AddRawNote"
	Keeper_GetRawNote_FullMethodName         = "/service.Keeper/GetRawNote"
	Keeper_GetRawNotesList_FullMethodName    = "/service.Keeper/GetRawNotesList"
	Keeper_UpdateRawNote_FullMethodName      = "/service.Keeper/UpdateRawNote"
	Keeper_DeleteRawNote_FullMethodName      = "/service.Keeper/DeleteRawNote"
	Keeper_AddCard_FullMethodName            = "/service.Keeper/AddCard"
	Keeper_GetCard_FullMethodName            = "/service.Keeper/GetCard"
	Keeper_GetCardsList_FullMethodName       = "/service.Keeper/GetCardsList"
	Keeper_UpdateCard_FullMethodName         = "/service.Keeper/UpdateCard"
	Keeper_DeleteCard_FullMethodName         = "/service.Keeper/DeleteCard"
	Keeper_AddCredentials_FullMethodName     = "/service.Keeper/AddCredentials"
	Keeper_GetCredentials_FullMethodName     = "/service.Keeper/GetCredentials"
	Keeper_GetCredentialsList_FullMethodName = "/service.Keeper/GetCredentialsList"
	Keeper_UpdateCredentials_FullMethodName  = "/service.Keeper/UpdateCredentials"
	Keeper_DeleteCredentials_FullMethodName  = "/service.Keeper/DeleteCredentials"
)

// KeeperClient is the client API for Keeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeeperClient interface {
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SignUp(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	SignIn(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	AddTextNote(ctx context.Context, in *AddTextNoteRequest, opts ...grpc.CallOption) (*AddTextNoteResponse, error)
	GetTextNote(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTextNoteResponse, error)
	GetTextNotesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListResponse, error)
	UpdateTextNote(ctx context.Context, in *UpdateTextNoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTextNote(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddRawNote(ctx context.Context, in *AddRawNoteRequest, opts ...grpc.CallOption) (*AddRawNoteResponse, error)
	GetRawNote(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetRawNoteResponse, error)
	GetRawNotesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListResponse, error)
	UpdateRawNote(ctx context.Context, in *UpdateRawNoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRawNote(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddCard(ctx context.Context, in *AddCardRequest, opts ...grpc.CallOption) (*AddCardResponse, error)
	GetCard(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetCardResponse, error)
	GetCardsList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListResponse, error)
	UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCard(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddCredentials(ctx context.Context, in *AddCredentialsRequest, opts ...grpc.CallOption) (*AddCredentialsResponse, error)
	GetCredentials(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error)
	GetCredentialsList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListResponse, error)
	UpdateCredentials(ctx context.Context, in *UpdateCredentialsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCredentials(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type keeperClient struct {
	cc grpc.ClientConnInterface
}

func NewKeeperClient(cc grpc.ClientConnInterface) KeeperClient {
	return &keeperClient{cc}
}

func (c *keeperClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Keeper_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) SignUp(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Keeper_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) SignIn(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Keeper_SignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) AddTextNote(ctx context.Context, in *AddTextNoteRequest, opts ...grpc.CallOption) (*AddTextNoteResponse, error) {
	out := new(AddTextNoteResponse)
	err := c.cc.Invoke(ctx, Keeper_AddTextNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) GetTextNote(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTextNoteResponse, error) {
	out := new(GetTextNoteResponse)
	err := c.cc.Invoke(ctx, Keeper_GetTextNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) GetTextNotesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, Keeper_GetTextNotesList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) UpdateTextNote(ctx context.Context, in *UpdateTextNoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Keeper_UpdateTextNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) DeleteTextNote(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Keeper_DeleteTextNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) AddRawNote(ctx context.Context, in *AddRawNoteRequest, opts ...grpc.CallOption) (*AddRawNoteResponse, error) {
	out := new(AddRawNoteResponse)
	err := c.cc.Invoke(ctx, Keeper_AddRawNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) GetRawNote(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetRawNoteResponse, error) {
	out := new(GetRawNoteResponse)
	err := c.cc.Invoke(ctx, Keeper_GetRawNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) GetRawNotesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, Keeper_GetRawNotesList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) UpdateRawNote(ctx context.Context, in *UpdateRawNoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Keeper_UpdateRawNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) DeleteRawNote(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Keeper_DeleteRawNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) AddCard(ctx context.Context, in *AddCardRequest, opts ...grpc.CallOption) (*AddCardResponse, error) {
	out := new(AddCardResponse)
	err := c.cc.Invoke(ctx, Keeper_AddCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) GetCard(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetCardResponse, error) {
	out := new(GetCardResponse)
	err := c.cc.Invoke(ctx, Keeper_GetCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) GetCardsList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, Keeper_GetCardsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Keeper_UpdateCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) DeleteCard(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Keeper_DeleteCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) AddCredentials(ctx context.Context, in *AddCredentialsRequest, opts ...grpc.CallOption) (*AddCredentialsResponse, error) {
	out := new(AddCredentialsResponse)
	err := c.cc.Invoke(ctx, Keeper_AddCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) GetCredentials(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error) {
	out := new(GetCredentialsResponse)
	err := c.cc.Invoke(ctx, Keeper_GetCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) GetCredentialsList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, Keeper_GetCredentialsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) UpdateCredentials(ctx context.Context, in *UpdateCredentialsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Keeper_UpdateCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) DeleteCredentials(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Keeper_DeleteCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeeperServer is the server API for Keeper service.
// All implementations must embed UnimplementedKeeperServer
// for forward compatibility
type KeeperServer interface {
	HealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	SignUp(context.Context, *AuthRequest) (*AuthResponse, error)
	SignIn(context.Context, *AuthRequest) (*AuthResponse, error)
	AddTextNote(context.Context, *AddTextNoteRequest) (*AddTextNoteResponse, error)
	GetTextNote(context.Context, *GetRequest) (*GetTextNoteResponse, error)
	GetTextNotesList(context.Context, *emptypb.Empty) (*GetListResponse, error)
	UpdateTextNote(context.Context, *UpdateTextNoteRequest) (*emptypb.Empty, error)
	DeleteTextNote(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	AddRawNote(context.Context, *AddRawNoteRequest) (*AddRawNoteResponse, error)
	GetRawNote(context.Context, *GetRequest) (*GetRawNoteResponse, error)
	GetRawNotesList(context.Context, *emptypb.Empty) (*GetListResponse, error)
	UpdateRawNote(context.Context, *UpdateRawNoteRequest) (*emptypb.Empty, error)
	DeleteRawNote(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	AddCard(context.Context, *AddCardRequest) (*AddCardResponse, error)
	GetCard(context.Context, *GetRequest) (*GetCardResponse, error)
	GetCardsList(context.Context, *emptypb.Empty) (*GetListResponse, error)
	UpdateCard(context.Context, *UpdateCardRequest) (*emptypb.Empty, error)
	DeleteCard(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	AddCredentials(context.Context, *AddCredentialsRequest) (*AddCredentialsResponse, error)
	GetCredentials(context.Context, *GetRequest) (*GetCredentialsResponse, error)
	GetCredentialsList(context.Context, *emptypb.Empty) (*GetListResponse, error)
	UpdateCredentials(context.Context, *UpdateCredentialsRequest) (*emptypb.Empty, error)
	DeleteCredentials(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedKeeperServer()
}

// UnimplementedKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedKeeperServer struct {
}

func (UnimplementedKeeperServer) HealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedKeeperServer) SignUp(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedKeeperServer) SignIn(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedKeeperServer) AddTextNote(context.Context, *AddTextNoteRequest) (*AddTextNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTextNote not implemented")
}
func (UnimplementedKeeperServer) GetTextNote(context.Context, *GetRequest) (*GetTextNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTextNote not implemented")
}
func (UnimplementedKeeperServer) GetTextNotesList(context.Context, *emptypb.Empty) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTextNotesList not implemented")
}
func (UnimplementedKeeperServer) UpdateTextNote(context.Context, *UpdateTextNoteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTextNote not implemented")
}
func (UnimplementedKeeperServer) DeleteTextNote(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTextNote not implemented")
}
func (UnimplementedKeeperServer) AddRawNote(context.Context, *AddRawNoteRequest) (*AddRawNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRawNote not implemented")
}
func (UnimplementedKeeperServer) GetRawNote(context.Context, *GetRequest) (*GetRawNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawNote not implemented")
}
func (UnimplementedKeeperServer) GetRawNotesList(context.Context, *emptypb.Empty) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawNotesList not implemented")
}
func (UnimplementedKeeperServer) UpdateRawNote(context.Context, *UpdateRawNoteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRawNote not implemented")
}
func (UnimplementedKeeperServer) DeleteRawNote(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRawNote not implemented")
}
func (UnimplementedKeeperServer) AddCard(context.Context, *AddCardRequest) (*AddCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (UnimplementedKeeperServer) GetCard(context.Context, *GetRequest) (*GetCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedKeeperServer) GetCardsList(context.Context, *emptypb.Empty) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsList not implemented")
}
func (UnimplementedKeeperServer) UpdateCard(context.Context, *UpdateCardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (UnimplementedKeeperServer) DeleteCard(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedKeeperServer) AddCredentials(context.Context, *AddCredentialsRequest) (*AddCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCredentials not implemented")
}
func (UnimplementedKeeperServer) GetCredentials(context.Context, *GetRequest) (*GetCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentials not implemented")
}
func (UnimplementedKeeperServer) GetCredentialsList(context.Context, *emptypb.Empty) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialsList not implemented")
}
func (UnimplementedKeeperServer) UpdateCredentials(context.Context, *UpdateCredentialsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredentials not implemented")
}
func (UnimplementedKeeperServer) DeleteCredentials(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredentials not implemented")
}
func (UnimplementedKeeperServer) mustEmbedUnimplementedKeeperServer() {}

// UnsafeKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeeperServer will
// result in compilation errors.
type UnsafeKeeperServer interface {
	mustEmbedUnimplementedKeeperServer()
}

func RegisterKeeperServer(s grpc.ServiceRegistrar, srv KeeperServer) {
	s.RegisterService(&Keeper_ServiceDesc, srv)
}

func _Keeper_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).SignUp(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).SignIn(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_AddTextNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTextNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).AddTextNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_AddTextNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).AddTextNote(ctx, req.(*AddTextNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_GetTextNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).GetTextNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_GetTextNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).GetTextNote(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_GetTextNotesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).GetTextNotesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_GetTextNotesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).GetTextNotesList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_UpdateTextNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTextNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).UpdateTextNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_UpdateTextNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).UpdateTextNote(ctx, req.(*UpdateTextNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_DeleteTextNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).DeleteTextNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_DeleteTextNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).DeleteTextNote(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_AddRawNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRawNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).AddRawNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_AddRawNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).AddRawNote(ctx, req.(*AddRawNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_GetRawNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).GetRawNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_GetRawNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).GetRawNote(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_GetRawNotesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).GetRawNotesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_GetRawNotesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).GetRawNotesList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_UpdateRawNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRawNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).UpdateRawNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_UpdateRawNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).UpdateRawNote(ctx, req.(*UpdateRawNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_DeleteRawNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).DeleteRawNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_DeleteRawNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).DeleteRawNote(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_AddCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).AddCard(ctx, req.(*AddCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_GetCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).GetCard(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_GetCardsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).GetCardsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_GetCardsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).GetCardsList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_UpdateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).UpdateCard(ctx, req.(*UpdateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_DeleteCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).DeleteCard(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_AddCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).AddCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_AddCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).AddCredentials(ctx, req.(*AddCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).GetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_GetCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).GetCredentials(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_GetCredentialsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).GetCredentialsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_GetCredentialsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).GetCredentialsList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_UpdateCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).UpdateCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_UpdateCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).UpdateCredentials(ctx, req.(*UpdateCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_DeleteCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).DeleteCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_DeleteCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).DeleteCredentials(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Keeper_ServiceDesc is the grpc.ServiceDesc for Keeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Keeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Keeper",
	HandlerType: (*KeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Keeper_HealthCheck_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _Keeper_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _Keeper_SignIn_Handler,
		},
		{
			MethodName: "AddTextNote",
			Handler:    _Keeper_AddTextNote_Handler,
		},
		{
			MethodName: "GetTextNote",
			Handler:    _Keeper_GetTextNote_Handler,
		},
		{
			MethodName: "GetTextNotesList",
			Handler:    _Keeper_GetTextNotesList_Handler,
		},
		{
			MethodName: "UpdateTextNote",
			Handler:    _Keeper_UpdateTextNote_Handler,
		},
		{
			MethodName: "DeleteTextNote",
			Handler:    _Keeper_DeleteTextNote_Handler,
		},
		{
			MethodName: "AddRawNote",
			Handler:    _Keeper_AddRawNote_Handler,
		},
		{
			MethodName: "GetRawNote",
			Handler:    _Keeper_GetRawNote_Handler,
		},
		{
			MethodName: "GetRawNotesList",
			Handler:    _Keeper_GetRawNotesList_Handler,
		},
		{
			MethodName: "UpdateRawNote",
			Handler:    _Keeper_UpdateRawNote_Handler,
		},
		{
			MethodName: "DeleteRawNote",
			Handler:    _Keeper_DeleteRawNote_Handler,
		},
		{
			MethodName: "AddCard",
			Handler:    _Keeper_AddCard_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _Keeper_GetCard_Handler,
		},
		{
			MethodName: "GetCardsList",
			Handler:    _Keeper_GetCardsList_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _Keeper_UpdateCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _Keeper_DeleteCard_Handler,
		},
		{
			MethodName: "AddCredentials",
			Handler:    _Keeper_AddCredentials_Handler,
		},
		{
			MethodName: "GetCredentials",
			Handler:    _Keeper_GetCredentials_Handler,
		},
		{
			MethodName: "GetCredentialsList",
			Handler:    _Keeper_GetCredentialsList_Handler,
		},
		{
			MethodName: "UpdateCredentials",
			Handler:    _Keeper_UpdateCredentials_Handler,
		},
		{
			MethodName: "DeleteCredentials",
			Handler:    _Keeper_DeleteCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/service.proto",
}
